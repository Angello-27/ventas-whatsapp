// src/infrastructure/vector/PineconeClient.js

/**
 * Cliente global de Pinecone v6 (m√≥dulo ESM).  
 *
 * ‚Äì Usamos `import(...)` din√°mico para cargar la clase `Pinecone` desde 
 *   "@pinecone-database/pinecone".  
 * ‚Äì Luego instanciamos `new Pinecone({ apiKey, environment })`.  
 * ‚Äì Finalmente, intentamos crear el √≠ndice (sin anidar createRequest).
 */

const pineconeConfig = require('../../config/pineconeConfig');

async function createAndInitClient() {
    // 1) Import din√°mico del m√≥dulo ESM de Pinecone
    const pineconeModule = await import('@pinecone-database/pinecone');

    // 2) La clase que necesitamos se llama ‚ÄúPinecone‚Äù
    const Pinecone = pineconeModule.Pinecone;
    if (typeof Pinecone !== 'function') {
        throw new Error('No se pudo encontrar la clase `Pinecone` en el paquete @pinecone-database/pinecone.');
    }

    // 3) Instanciamos pas√°ndole apiKey y environment directamente
    //    (podr√≠as omitir el campo `environment` si ya lo defines en PINECONE_ENVIRONMENT)
    const client = new Pinecone({
        apiKey: pineconeConfig.apiKey
    });

    // 5) Crear el √≠ndice si no existe, usando el formato v6.x sin ‚ÄúcreateRequest‚Äù anidado
    try {
        await client.createIndex({
            name: pineconeConfig.indexName,
            dimension: 1536,    // embeddings de text-embedding-ada-002
            metric: 'cosine',   // opcional si quieres 'cosine' expl√≠cito
            spec: {
                serverless: {
                    cloud: 'aws',     // ‚Äúgcp‚Äù o ‚Äúaws‚Äù o ‚Äúazure‚Äù
                    region: pineconeConfig.environment    // ‚Äúus-west1‚Äù o similar
                }
            }
        });
        console.log(`üü¢ √çndice "${pineconeConfig.indexName}" creado en Pinecone.`);
    } catch (err) {
        // Pinecone devuelve 409 con code "ALREADY_EXISTS" si el √≠ndice ya existe.
        const alreadyExists =
            err.code === 'ALREADY_EXISTS' ||
            err.error?.code === 'ALREADY_EXISTS' ||
            (typeof err.message === 'string' && err.message.includes('ALREADY_EXISTS'));

        if (alreadyExists) {
            console.log(`üü° El √≠ndice "${pineconeConfig.indexName}" ya exist√≠a ‚Üí omitiendo creaci√≥n.`);
        } else {
            console.error('‚ùå Error creando √≠ndice en Pinecone:', err);
            throw err;
        }
    }

    console.log(`‚úÖ Pinecone inicializado y listo (√≠ndice: ${pineconeConfig.indexName}).`);
    return client;
}

// Exportamos una promesa que resuelve en la instancia ya inicializada
const pineconeClientPromise = createAndInitClient();
module.exports = pineconeClientPromise;
